package selenium;// Generated by Selenium IDE

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class AddRemoveElementsTestFull {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before // всё, что должно выполняться до теста (перед каждым или перед конкретным)
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After // всё, что после теста
  public void tearDown() {
    driver.quit();
  } // в данном случе выход
  @Test
  public void addRemoveElements() { // тут можно посмотреть, какие объекты класса использует selenium
    driver.get("http://the-internet.herokuapp.com/"); // запрос страницы
    driver.manage().window().setSize(new Dimension(1792, 1010)); // размер окна браузера
    driver.findElement(By.linkText("Add/Remove Elements")).click(); // веб-драйвер ищет элемент на странице
    driver.findElement(By.cssSelector("button")).click(); // поиск кнопки по css поиску "найди элемент, кликни на него"
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".added-manually"));
      assert(elements.size() > 0); // метод проверки наличия элемента
    }
    driver.findElement(By.cssSelector(".added-manually")).click();
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".added-manually"));
      assert(elements.size() == 0); // метод проверки отсутствия элемента
    }
  }
}
